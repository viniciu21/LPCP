<P> -> <DECLS> <SUBPs> <M>


<DECLS> -> | <DECL_BEGIN> <DECS> <DECL_END>

<DECS> -> <DECL> ';'
	    | <DECL> ';' <DECS>

<DECL> -> <var_decl> | <type_decl> |<const_decl> | <func_decl>

<var_decl> ->  <IDs> ':' <type> 

<IDs> -> ID | ID ',' <IDs>

<const_decl> -> CONST ID '=' <value> 

<func_decl> -> ID ':' <types> -> <type> 

<types> -> <type>
	     | <type> ',' <types> 

<type_decl> -> typedef struct '{' <DECS> '}' ID 
			 | typedef ID ID

<value> -> INT | CHAR | STRING | FLOAT | BOOL 

<type> -> <int> | <char> | <string> | <float> | <bool>

<SUBPs> -> <FUNC> ID ':' <decs> <stmts> <END_FUNC>

<M> -> <BEGIN_M> ':' <stmts> <END_M>

<stmts> ->  | <stmt> <stmts> 
<stmt> -><DECS> | <for> | <while> | <if> | <atr> 
<atr> -> ID '=' <value> 
	   | ID '=' <expression>

<expression> -> <expression> + <term> 
			  | <expression> - <term>
			  | <expression> && <expression> 
			  | <expression> || <expression> 
			  | <expression> ^ <expression>
				| !<expression>
				| <expression> < <expression>
				| <expression> > <expression> 
				| <expression> == <expression>
				| <expression> != <expression>
				| ID | <call> | <value>
<term> -> <term> * <factor>
		| <term> / <factor>
<factor> -> <exponential> ** <factor>
          | <exponential>
<exponential> -> (<expression>) | ID | <call>


<for> -> FOR '(' <atr> ';' <expression> ';' <atr> ') ':' <stmts> <END_FOR>
<if> -> IF '('<expression')' <stmts> <elifs> <else> END_IF
<elifs> -> | <elif> <elifs>
<elif> -> elif'('<expression>')'
<while> -> WHILE '(' <expression> ')' <stmts> <END_WHILE>



  


	